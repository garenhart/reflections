What happens when you initialize a repository? Why do you need to do it?

	A hidden .git directory is added to the current directory to store
	repository meta-data.

How is the staging area different from the working directory and the repository? What value do you think it offers?

	Staging area allows adding files individually until they are ready for a commit, which helps keeping commits smaller.

How can you use the staging area to make sure you have one commit per logical change?

	Keep adding changes to staging area until all changes for the logical unit are complete, then commit.	

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Brnaches are useful for experimental some features, alternative languages, demo versions. etc.. Branches help in doing all of this without geopardising the main code.

How do the diagrams help you visualize the branch structure?
	Diagrams help to see then code organization, the parent of each commit, and assist in merging as needed.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	The result of merging is the combination of all commits from both branches. The diagram shows where the versions branched off, so it easier to manage and merge the branches.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually

	pros: When the branches being merged have unrelated changes the merge just happens automatically. In any case automatic merge allows you to concentrate on conflicts without spending much time figuring out the differences.

	cons: Automatic merging algorythms are a huge potential risk if the logic is trying to be too smart.	